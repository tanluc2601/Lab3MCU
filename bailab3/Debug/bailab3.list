
bailab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bd4  08002bd4  00012bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf4  08002bf4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf4  08002bf4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf4  08002bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000030  08002c2c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002c2c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009954  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  000299ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bde  00000000  00000000  0002c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b755  00000000  00000000  0004342e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823bf  00000000  00000000  0004eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0f42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002840  00000000  00000000  000d0f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bbc 	.word	0x08002bbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002bbc 	.word	0x08002bbc

0800014c <setTimer0>:
int trafficLightState0 = 0;
int trafficLightState1 = 2;
int count0 = 5;
int count1 = 3;

void setTimer0 ( int duration ){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer0+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer0+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer0+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000
 8000178:	20000050 	.word	0x20000050
 800017c:	2000004c 	.word	0x2000004c

08000180 <setTimer1>:

void setTimer1 ( int duration ){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE ;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer1+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer1+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer1+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	20000058 	.word	0x20000058
 80001b0:	20000054 	.word	0x20000054

080001b4 <timer_run>:
void setTimer2 ( int duration ){
	timer2_counter = duration / TIMER_CYCLE ;
	timer2_flag = 0;
}

void timer_run (void){
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	if( timer0_counter > 0){
 80001b8:	4b11      	ldr	r3, [pc, #68]	; (8000200 <timer_run+0x4c>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	dd0b      	ble.n	80001d8 <timer_run+0x24>
		timer0_counter --;
 80001c0:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <timer_run+0x4c>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	3b01      	subs	r3, #1
 80001c6:	4a0e      	ldr	r2, [pc, #56]	; (8000200 <timer_run+0x4c>)
 80001c8:	6013      	str	r3, [r2, #0]
		if ( timer0_counter == 0) timer0_flag = 1;
 80001ca:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <timer_run+0x4c>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d102      	bne.n	80001d8 <timer_run+0x24>
 80001d2:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <timer_run+0x50>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	601a      	str	r2, [r3, #0]
	}
	if( timer1_counter > 0){
 80001d8:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <timer_run+0x54>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	dd0b      	ble.n	80001f8 <timer_run+0x44>
		timer1_counter --;
 80001e0:	4b09      	ldr	r3, [pc, #36]	; (8000208 <timer_run+0x54>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	3b01      	subs	r3, #1
 80001e6:	4a08      	ldr	r2, [pc, #32]	; (8000208 <timer_run+0x54>)
 80001e8:	6013      	str	r3, [r2, #0]
		if ( timer1_counter == 0) timer1_flag = 1;
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <timer_run+0x54>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d102      	bne.n	80001f8 <timer_run+0x44>
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <timer_run+0x58>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	601a      	str	r2, [r3, #0]
	}
//	if( timer2_counter > 0){
//		timer2_counter --;
//		if ( timer2_counter == 0) timer2_flag = 1;
//	}
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	20000050 	.word	0x20000050
 8000204:	2000004c 	.word	0x2000004c
 8000208:	20000058 	.word	0x20000058
 800020c:	20000054 	.word	0x20000054

08000210 <display7SEG0>:

void display7SEG0(int num){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b09      	cmp	r3, #9
 800021c:	f200 8180 	bhi.w	8000520 <display7SEG0+0x310>
 8000220:	a201      	add	r2, pc, #4	; (adr r2, 8000228 <display7SEG0+0x18>)
 8000222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000226:	bf00      	nop
 8000228:	08000251 	.word	0x08000251
 800022c:	08000299 	.word	0x08000299
 8000230:	080002e1 	.word	0x080002e1
 8000234:	08000329 	.word	0x08000329
 8000238:	08000371 	.word	0x08000371
 800023c:	080003b9 	.word	0x080003b9
 8000240:	08000401 	.word	0x08000401
 8000244:	08000449 	.word	0x08000449
 8000248:	08000491 	.word	0x08000491
 800024c:	080004d9 	.word	0x080004d9
  	  switch(num) {
  	  case 0:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2101      	movs	r1, #1
 8000254:	48c6      	ldr	r0, [pc, #792]	; (8000570 <display7SEG0+0x360>)
 8000256:	f001 fc88 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	2102      	movs	r1, #2
 800025e:	48c4      	ldr	r0, [pc, #784]	; (8000570 <display7SEG0+0x360>)
 8000260:	f001 fc83 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2104      	movs	r1, #4
 8000268:	48c1      	ldr	r0, [pc, #772]	; (8000570 <display7SEG0+0x360>)
 800026a:	f001 fc7e 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2108      	movs	r1, #8
 8000272:	48bf      	ldr	r0, [pc, #764]	; (8000570 <display7SEG0+0x360>)
 8000274:	f001 fc79 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2110      	movs	r1, #16
 800027c:	48bc      	ldr	r0, [pc, #752]	; (8000570 <display7SEG0+0x360>)
 800027e:	f001 fc74 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2120      	movs	r1, #32
 8000286:	48ba      	ldr	r0, [pc, #744]	; (8000570 <display7SEG0+0x360>)
 8000288:	f001 fc6f 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2140      	movs	r1, #64	; 0x40
 8000290:	48b7      	ldr	r0, [pc, #732]	; (8000570 <display7SEG0+0x360>)
 8000292:	f001 fc6a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 8000296:	e167      	b.n	8000568 <display7SEG0+0x358>
  	  case 1:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	2101      	movs	r1, #1
 800029c:	48b4      	ldr	r0, [pc, #720]	; (8000570 <display7SEG0+0x360>)
 800029e:	f001 fc64 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2102      	movs	r1, #2
 80002a6:	48b2      	ldr	r0, [pc, #712]	; (8000570 <display7SEG0+0x360>)
 80002a8:	f001 fc5f 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2104      	movs	r1, #4
 80002b0:	48af      	ldr	r0, [pc, #700]	; (8000570 <display7SEG0+0x360>)
 80002b2:	f001 fc5a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2108      	movs	r1, #8
 80002ba:	48ad      	ldr	r0, [pc, #692]	; (8000570 <display7SEG0+0x360>)
 80002bc:	f001 fc55 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2110      	movs	r1, #16
 80002c4:	48aa      	ldr	r0, [pc, #680]	; (8000570 <display7SEG0+0x360>)
 80002c6:	f001 fc50 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2120      	movs	r1, #32
 80002ce:	48a8      	ldr	r0, [pc, #672]	; (8000570 <display7SEG0+0x360>)
 80002d0:	f001 fc4b 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2140      	movs	r1, #64	; 0x40
 80002d8:	48a5      	ldr	r0, [pc, #660]	; (8000570 <display7SEG0+0x360>)
 80002da:	f001 fc46 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80002de:	e143      	b.n	8000568 <display7SEG0+0x358>
  	  case 2:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2101      	movs	r1, #1
 80002e4:	48a2      	ldr	r0, [pc, #648]	; (8000570 <display7SEG0+0x360>)
 80002e6:	f001 fc40 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2102      	movs	r1, #2
 80002ee:	48a0      	ldr	r0, [pc, #640]	; (8000570 <display7SEG0+0x360>)
 80002f0:	f001 fc3b 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2104      	movs	r1, #4
 80002f8:	489d      	ldr	r0, [pc, #628]	; (8000570 <display7SEG0+0x360>)
 80002fa:	f001 fc36 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2108      	movs	r1, #8
 8000302:	489b      	ldr	r0, [pc, #620]	; (8000570 <display7SEG0+0x360>)
 8000304:	f001 fc31 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2110      	movs	r1, #16
 800030c:	4898      	ldr	r0, [pc, #608]	; (8000570 <display7SEG0+0x360>)
 800030e:	f001 fc2c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2120      	movs	r1, #32
 8000316:	4896      	ldr	r0, [pc, #600]	; (8000570 <display7SEG0+0x360>)
 8000318:	f001 fc27 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	4893      	ldr	r0, [pc, #588]	; (8000570 <display7SEG0+0x360>)
 8000322:	f001 fc22 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 8000326:	e11f      	b.n	8000568 <display7SEG0+0x358>
  	  case 3:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2101      	movs	r1, #1
 800032c:	4890      	ldr	r0, [pc, #576]	; (8000570 <display7SEG0+0x360>)
 800032e:	f001 fc1c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	488e      	ldr	r0, [pc, #568]	; (8000570 <display7SEG0+0x360>)
 8000338:	f001 fc17 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2104      	movs	r1, #4
 8000340:	488b      	ldr	r0, [pc, #556]	; (8000570 <display7SEG0+0x360>)
 8000342:	f001 fc12 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2108      	movs	r1, #8
 800034a:	4889      	ldr	r0, [pc, #548]	; (8000570 <display7SEG0+0x360>)
 800034c:	f001 fc0d 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2110      	movs	r1, #16
 8000354:	4886      	ldr	r0, [pc, #536]	; (8000570 <display7SEG0+0x360>)
 8000356:	f001 fc08 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2120      	movs	r1, #32
 800035e:	4884      	ldr	r0, [pc, #528]	; (8000570 <display7SEG0+0x360>)
 8000360:	f001 fc03 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2140      	movs	r1, #64	; 0x40
 8000368:	4881      	ldr	r0, [pc, #516]	; (8000570 <display7SEG0+0x360>)
 800036a:	f001 fbfe 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 800036e:	e0fb      	b.n	8000568 <display7SEG0+0x358>
  	  case 4:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2101      	movs	r1, #1
 8000374:	487e      	ldr	r0, [pc, #504]	; (8000570 <display7SEG0+0x360>)
 8000376:	f001 fbf8 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2102      	movs	r1, #2
 800037e:	487c      	ldr	r0, [pc, #496]	; (8000570 <display7SEG0+0x360>)
 8000380:	f001 fbf3 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2104      	movs	r1, #4
 8000388:	4879      	ldr	r0, [pc, #484]	; (8000570 <display7SEG0+0x360>)
 800038a:	f001 fbee 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	2108      	movs	r1, #8
 8000392:	4877      	ldr	r0, [pc, #476]	; (8000570 <display7SEG0+0x360>)
 8000394:	f001 fbe9 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	2110      	movs	r1, #16
 800039c:	4874      	ldr	r0, [pc, #464]	; (8000570 <display7SEG0+0x360>)
 800039e:	f001 fbe4 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	4872      	ldr	r0, [pc, #456]	; (8000570 <display7SEG0+0x360>)
 80003a8:	f001 fbdf 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2140      	movs	r1, #64	; 0x40
 80003b0:	486f      	ldr	r0, [pc, #444]	; (8000570 <display7SEG0+0x360>)
 80003b2:	f001 fbda 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80003b6:	e0d7      	b.n	8000568 <display7SEG0+0x358>
  	  case 5:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2101      	movs	r1, #1
 80003bc:	486c      	ldr	r0, [pc, #432]	; (8000570 <display7SEG0+0x360>)
 80003be:	f001 fbd4 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2102      	movs	r1, #2
 80003c6:	486a      	ldr	r0, [pc, #424]	; (8000570 <display7SEG0+0x360>)
 80003c8:	f001 fbcf 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2104      	movs	r1, #4
 80003d0:	4867      	ldr	r0, [pc, #412]	; (8000570 <display7SEG0+0x360>)
 80003d2:	f001 fbca 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2108      	movs	r1, #8
 80003da:	4865      	ldr	r0, [pc, #404]	; (8000570 <display7SEG0+0x360>)
 80003dc:	f001 fbc5 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2110      	movs	r1, #16
 80003e4:	4862      	ldr	r0, [pc, #392]	; (8000570 <display7SEG0+0x360>)
 80003e6:	f001 fbc0 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2120      	movs	r1, #32
 80003ee:	4860      	ldr	r0, [pc, #384]	; (8000570 <display7SEG0+0x360>)
 80003f0:	f001 fbbb 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2140      	movs	r1, #64	; 0x40
 80003f8:	485d      	ldr	r0, [pc, #372]	; (8000570 <display7SEG0+0x360>)
 80003fa:	f001 fbb6 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80003fe:	e0b3      	b.n	8000568 <display7SEG0+0x358>
  	  case 6:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2101      	movs	r1, #1
 8000404:	485a      	ldr	r0, [pc, #360]	; (8000570 <display7SEG0+0x360>)
 8000406:	f001 fbb0 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_SET);
 800040a:	2201      	movs	r2, #1
 800040c:	2102      	movs	r1, #2
 800040e:	4858      	ldr	r0, [pc, #352]	; (8000570 <display7SEG0+0x360>)
 8000410:	f001 fbab 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2104      	movs	r1, #4
 8000418:	4855      	ldr	r0, [pc, #340]	; (8000570 <display7SEG0+0x360>)
 800041a:	f001 fba6 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2108      	movs	r1, #8
 8000422:	4853      	ldr	r0, [pc, #332]	; (8000570 <display7SEG0+0x360>)
 8000424:	f001 fba1 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2110      	movs	r1, #16
 800042c:	4850      	ldr	r0, [pc, #320]	; (8000570 <display7SEG0+0x360>)
 800042e:	f001 fb9c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2120      	movs	r1, #32
 8000436:	484e      	ldr	r0, [pc, #312]	; (8000570 <display7SEG0+0x360>)
 8000438:	f001 fb97 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2140      	movs	r1, #64	; 0x40
 8000440:	484b      	ldr	r0, [pc, #300]	; (8000570 <display7SEG0+0x360>)
 8000442:	f001 fb92 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 8000446:	e08f      	b.n	8000568 <display7SEG0+0x358>
  	  case 7:
  		 HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2101      	movs	r1, #1
 800044c:	4848      	ldr	r0, [pc, #288]	; (8000570 <display7SEG0+0x360>)
 800044e:	f001 fb8c 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2102      	movs	r1, #2
 8000456:	4846      	ldr	r0, [pc, #280]	; (8000570 <display7SEG0+0x360>)
 8000458:	f001 fb87 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2104      	movs	r1, #4
 8000460:	4843      	ldr	r0, [pc, #268]	; (8000570 <display7SEG0+0x360>)
 8000462:	f001 fb82 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	2108      	movs	r1, #8
 800046a:	4841      	ldr	r0, [pc, #260]	; (8000570 <display7SEG0+0x360>)
 800046c:	f001 fb7d 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2110      	movs	r1, #16
 8000474:	483e      	ldr	r0, [pc, #248]	; (8000570 <display7SEG0+0x360>)
 8000476:	f001 fb78 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_SET);
 800047a:	2201      	movs	r2, #1
 800047c:	2120      	movs	r1, #32
 800047e:	483c      	ldr	r0, [pc, #240]	; (8000570 <display7SEG0+0x360>)
 8000480:	f001 fb73 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2140      	movs	r1, #64	; 0x40
 8000488:	4839      	ldr	r0, [pc, #228]	; (8000570 <display7SEG0+0x360>)
 800048a:	f001 fb6e 	bl	8001b6a <HAL_GPIO_WritePin>
  		 break;
 800048e:	e06b      	b.n	8000568 <display7SEG0+0x358>
  	  case 8:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2101      	movs	r1, #1
 8000494:	4836      	ldr	r0, [pc, #216]	; (8000570 <display7SEG0+0x360>)
 8000496:	f001 fb68 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2102      	movs	r1, #2
 800049e:	4834      	ldr	r0, [pc, #208]	; (8000570 <display7SEG0+0x360>)
 80004a0:	f001 fb63 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2104      	movs	r1, #4
 80004a8:	4831      	ldr	r0, [pc, #196]	; (8000570 <display7SEG0+0x360>)
 80004aa:	f001 fb5e 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2108      	movs	r1, #8
 80004b2:	482f      	ldr	r0, [pc, #188]	; (8000570 <display7SEG0+0x360>)
 80004b4:	f001 fb59 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2110      	movs	r1, #16
 80004bc:	482c      	ldr	r0, [pc, #176]	; (8000570 <display7SEG0+0x360>)
 80004be:	f001 fb54 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2120      	movs	r1, #32
 80004c6:	482a      	ldr	r0, [pc, #168]	; (8000570 <display7SEG0+0x360>)
 80004c8:	f001 fb4f 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	4827      	ldr	r0, [pc, #156]	; (8000570 <display7SEG0+0x360>)
 80004d2:	f001 fb4a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80004d6:	e047      	b.n	8000568 <display7SEG0+0x358>
  	  case 9:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2101      	movs	r1, #1
 80004dc:	4824      	ldr	r0, [pc, #144]	; (8000570 <display7SEG0+0x360>)
 80004de:	f001 fb44 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2102      	movs	r1, #2
 80004e6:	4822      	ldr	r0, [pc, #136]	; (8000570 <display7SEG0+0x360>)
 80004e8:	f001 fb3f 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2104      	movs	r1, #4
 80004f0:	481f      	ldr	r0, [pc, #124]	; (8000570 <display7SEG0+0x360>)
 80004f2:	f001 fb3a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2108      	movs	r1, #8
 80004fa:	481d      	ldr	r0, [pc, #116]	; (8000570 <display7SEG0+0x360>)
 80004fc:	f001 fb35 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2110      	movs	r1, #16
 8000504:	481a      	ldr	r0, [pc, #104]	; (8000570 <display7SEG0+0x360>)
 8000506:	f001 fb30 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2120      	movs	r1, #32
 800050e:	4818      	ldr	r0, [pc, #96]	; (8000570 <display7SEG0+0x360>)
 8000510:	f001 fb2b 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	4815      	ldr	r0, [pc, #84]	; (8000570 <display7SEG0+0x360>)
 800051a:	f001 fb26 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 800051e:	e023      	b.n	8000568 <display7SEG0+0x358>
  	  default:
  		  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin,GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2101      	movs	r1, #1
 8000524:	4812      	ldr	r0, [pc, #72]	; (8000570 <display7SEG0+0x360>)
 8000526:	f001 fb20 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_1_Pin,GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2102      	movs	r1, #2
 800052e:	4810      	ldr	r0, [pc, #64]	; (8000570 <display7SEG0+0x360>)
 8000530:	f001 fb1b 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_2_Pin,GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2104      	movs	r1, #4
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <display7SEG0+0x360>)
 800053a:	f001 fb16 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_3_Pin,GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2108      	movs	r1, #8
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <display7SEG0+0x360>)
 8000544:	f001 fb11 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_4_Pin,GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <display7SEG0+0x360>)
 800054e:	f001 fb0c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_5_Pin,GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2120      	movs	r1, #32
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <display7SEG0+0x360>)
 8000558:	f001 fb07 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG0_6_Pin,GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <display7SEG0+0x360>)
 8000562:	f001 fb02 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 8000566:	bf00      	nop
  	  }
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010c00 	.word	0x40010c00

08000574 <display7SEG1>:

void display7SEG1(int num){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b09      	cmp	r3, #9
 8000580:	f200 81be 	bhi.w	8000900 <display7SEG1+0x38c>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <display7SEG1+0x18>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	080005b5 	.word	0x080005b5
 8000590:	08000609 	.word	0x08000609
 8000594:	0800065d 	.word	0x0800065d
 8000598:	080006b1 	.word	0x080006b1
 800059c:	08000705 	.word	0x08000705
 80005a0:	08000759 	.word	0x08000759
 80005a4:	080007ad 	.word	0x080007ad
 80005a8:	08000801 	.word	0x08000801
 80005ac:	08000855 	.word	0x08000855
 80005b0:	080008a9 	.word	0x080008a9
  	  switch(num) {
  	  case 0:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	48d0      	ldr	r0, [pc, #832]	; (80008fc <display7SEG1+0x388>)
 80005ba:	f001 fad6 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	48cd      	ldr	r0, [pc, #820]	; (80008fc <display7SEG1+0x388>)
 80005c6:	f001 fad0 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	48ca      	ldr	r0, [pc, #808]	; (80008fc <display7SEG1+0x388>)
 80005d2:	f001 faca 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005dc:	48c7      	ldr	r0, [pc, #796]	; (80008fc <display7SEG1+0x388>)
 80005de:	f001 fac4 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e8:	48c4      	ldr	r0, [pc, #784]	; (80008fc <display7SEG1+0x388>)
 80005ea:	f001 fabe 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	48c1      	ldr	r0, [pc, #772]	; (80008fc <display7SEG1+0x388>)
 80005f6:	f001 fab8 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	48be      	ldr	r0, [pc, #760]	; (80008fc <display7SEG1+0x388>)
 8000602:	f001 fab2 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 8000606:	e1a5      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 1:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	48bb      	ldr	r0, [pc, #748]	; (80008fc <display7SEG1+0x388>)
 800060e:	f001 faac 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	48b8      	ldr	r0, [pc, #736]	; (80008fc <display7SEG1+0x388>)
 800061a:	f001 faa6 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000624:	48b5      	ldr	r0, [pc, #724]	; (80008fc <display7SEG1+0x388>)
 8000626:	f001 faa0 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000630:	48b2      	ldr	r0, [pc, #712]	; (80008fc <display7SEG1+0x388>)
 8000632:	f001 fa9a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063c:	48af      	ldr	r0, [pc, #700]	; (80008fc <display7SEG1+0x388>)
 800063e:	f001 fa94 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000648:	48ac      	ldr	r0, [pc, #688]	; (80008fc <display7SEG1+0x388>)
 800064a:	f001 fa8e 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000654:	48a9      	ldr	r0, [pc, #676]	; (80008fc <display7SEG1+0x388>)
 8000656:	f001 fa88 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 800065a:	e17b      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 2:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	48a6      	ldr	r0, [pc, #664]	; (80008fc <display7SEG1+0x388>)
 8000662:	f001 fa82 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	48a3      	ldr	r0, [pc, #652]	; (80008fc <display7SEG1+0x388>)
 800066e:	f001 fa7c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	48a0      	ldr	r0, [pc, #640]	; (80008fc <display7SEG1+0x388>)
 800067a:	f001 fa76 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000684:	489d      	ldr	r0, [pc, #628]	; (80008fc <display7SEG1+0x388>)
 8000686:	f001 fa70 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000690:	489a      	ldr	r0, [pc, #616]	; (80008fc <display7SEG1+0x388>)
 8000692:	f001 fa6a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069c:	4897      	ldr	r0, [pc, #604]	; (80008fc <display7SEG1+0x388>)
 800069e:	f001 fa64 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a8:	4894      	ldr	r0, [pc, #592]	; (80008fc <display7SEG1+0x388>)
 80006aa:	f001 fa5e 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80006ae:	e151      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 3:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	4891      	ldr	r0, [pc, #580]	; (80008fc <display7SEG1+0x388>)
 80006b6:	f001 fa58 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c0:	488e      	ldr	r0, [pc, #568]	; (80008fc <display7SEG1+0x388>)
 80006c2:	f001 fa52 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	488b      	ldr	r0, [pc, #556]	; (80008fc <display7SEG1+0x388>)
 80006ce:	f001 fa4c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d8:	4888      	ldr	r0, [pc, #544]	; (80008fc <display7SEG1+0x388>)
 80006da:	f001 fa46 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	4885      	ldr	r0, [pc, #532]	; (80008fc <display7SEG1+0x388>)
 80006e6:	f001 fa40 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4882      	ldr	r0, [pc, #520]	; (80008fc <display7SEG1+0x388>)
 80006f2:	f001 fa3a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fc:	487f      	ldr	r0, [pc, #508]	; (80008fc <display7SEG1+0x388>)
 80006fe:	f001 fa34 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 8000702:	e127      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 4:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	487c      	ldr	r0, [pc, #496]	; (80008fc <display7SEG1+0x388>)
 800070a:	f001 fa2e 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000714:	4879      	ldr	r0, [pc, #484]	; (80008fc <display7SEG1+0x388>)
 8000716:	f001 fa28 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000720:	4876      	ldr	r0, [pc, #472]	; (80008fc <display7SEG1+0x388>)
 8000722:	f001 fa22 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072c:	4873      	ldr	r0, [pc, #460]	; (80008fc <display7SEG1+0x388>)
 800072e:	f001 fa1c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	4870      	ldr	r0, [pc, #448]	; (80008fc <display7SEG1+0x388>)
 800073a:	f001 fa16 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000744:	486d      	ldr	r0, [pc, #436]	; (80008fc <display7SEG1+0x388>)
 8000746:	f001 fa10 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000750:	486a      	ldr	r0, [pc, #424]	; (80008fc <display7SEG1+0x388>)
 8000752:	f001 fa0a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 8000756:	e0fd      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 5:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	4867      	ldr	r0, [pc, #412]	; (80008fc <display7SEG1+0x388>)
 800075e:	f001 fa04 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	4864      	ldr	r0, [pc, #400]	; (80008fc <display7SEG1+0x388>)
 800076a:	f001 f9fe 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4861      	ldr	r0, [pc, #388]	; (80008fc <display7SEG1+0x388>)
 8000776:	f001 f9f8 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000780:	485e      	ldr	r0, [pc, #376]	; (80008fc <display7SEG1+0x388>)
 8000782:	f001 f9f2 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800078c:	485b      	ldr	r0, [pc, #364]	; (80008fc <display7SEG1+0x388>)
 800078e:	f001 f9ec 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000798:	4858      	ldr	r0, [pc, #352]	; (80008fc <display7SEG1+0x388>)
 800079a:	f001 f9e6 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	4855      	ldr	r0, [pc, #340]	; (80008fc <display7SEG1+0x388>)
 80007a6:	f001 f9e0 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80007aa:	e0d3      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 6:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	4852      	ldr	r0, [pc, #328]	; (80008fc <display7SEG1+0x388>)
 80007b2:	f001 f9da 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007bc:	484f      	ldr	r0, [pc, #316]	; (80008fc <display7SEG1+0x388>)
 80007be:	f001 f9d4 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	484c      	ldr	r0, [pc, #304]	; (80008fc <display7SEG1+0x388>)
 80007ca:	f001 f9ce 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	4849      	ldr	r0, [pc, #292]	; (80008fc <display7SEG1+0x388>)
 80007d6:	f001 f9c8 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e0:	4846      	ldr	r0, [pc, #280]	; (80008fc <display7SEG1+0x388>)
 80007e2:	f001 f9c2 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ec:	4843      	ldr	r0, [pc, #268]	; (80008fc <display7SEG1+0x388>)
 80007ee:	f001 f9bc 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f8:	4840      	ldr	r0, [pc, #256]	; (80008fc <display7SEG1+0x388>)
 80007fa:	f001 f9b6 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80007fe:	e0a9      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 7:
  		 HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	483d      	ldr	r0, [pc, #244]	; (80008fc <display7SEG1+0x388>)
 8000806:	f001 f9b0 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	483a      	ldr	r0, [pc, #232]	; (80008fc <display7SEG1+0x388>)
 8000812:	f001 f9aa 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081c:	4837      	ldr	r0, [pc, #220]	; (80008fc <display7SEG1+0x388>)
 800081e:	f001 f9a4 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000828:	4834      	ldr	r0, [pc, #208]	; (80008fc <display7SEG1+0x388>)
 800082a:	f001 f99e 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000834:	4831      	ldr	r0, [pc, #196]	; (80008fc <display7SEG1+0x388>)
 8000836:	f001 f998 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_SET);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000840:	482e      	ldr	r0, [pc, #184]	; (80008fc <display7SEG1+0x388>)
 8000842:	f001 f992 	bl	8001b6a <HAL_GPIO_WritePin>
  		 HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084c:	482b      	ldr	r0, [pc, #172]	; (80008fc <display7SEG1+0x388>)
 800084e:	f001 f98c 	bl	8001b6a <HAL_GPIO_WritePin>
  		 break;
 8000852:	e07f      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 8:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	4828      	ldr	r0, [pc, #160]	; (80008fc <display7SEG1+0x388>)
 800085a:	f001 f986 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	4825      	ldr	r0, [pc, #148]	; (80008fc <display7SEG1+0x388>)
 8000866:	f001 f980 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <display7SEG1+0x388>)
 8000872:	f001 f97a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087c:	481f      	ldr	r0, [pc, #124]	; (80008fc <display7SEG1+0x388>)
 800087e:	f001 f974 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000888:	481c      	ldr	r0, [pc, #112]	; (80008fc <display7SEG1+0x388>)
 800088a:	f001 f96e 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000894:	4819      	ldr	r0, [pc, #100]	; (80008fc <display7SEG1+0x388>)
 8000896:	f001 f968 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4816      	ldr	r0, [pc, #88]	; (80008fc <display7SEG1+0x388>)
 80008a2:	f001 f962 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80008a6:	e055      	b.n	8000954 <display7SEG1+0x3e0>
  	  case 9:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	4813      	ldr	r0, [pc, #76]	; (80008fc <display7SEG1+0x388>)
 80008ae:	f001 f95c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b8:	4810      	ldr	r0, [pc, #64]	; (80008fc <display7SEG1+0x388>)
 80008ba:	f001 f956 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <display7SEG1+0x388>)
 80008c6:	f001 f950 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <display7SEG1+0x388>)
 80008d2:	f001 f94a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <display7SEG1+0x388>)
 80008de:	f001 f944 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <display7SEG1+0x388>)
 80008ea:	f001 f93e 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f4:	4801      	ldr	r0, [pc, #4]	; (80008fc <display7SEG1+0x388>)
 80008f6:	f001 f938 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 80008fa:	e02b      	b.n	8000954 <display7SEG1+0x3e0>
 80008fc:	40010c00 	.word	0x40010c00
  	  default:
  		  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin,GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	4815      	ldr	r0, [pc, #84]	; (800095c <display7SEG1+0x3e8>)
 8000906:	f001 f930 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_1_Pin,GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000910:	4812      	ldr	r0, [pc, #72]	; (800095c <display7SEG1+0x3e8>)
 8000912:	f001 f92a 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_2_Pin,GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	480f      	ldr	r0, [pc, #60]	; (800095c <display7SEG1+0x3e8>)
 800091e:	f001 f924 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_3_Pin,GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <display7SEG1+0x3e8>)
 800092a:	f001 f91e 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_4_Pin,GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <display7SEG1+0x3e8>)
 8000936:	f001 f918 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_5_Pin,GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <display7SEG1+0x3e8>)
 8000942:	f001 f912 	bl	8001b6a <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOB, SEG1_6_Pin,GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <display7SEG1+0x3e8>)
 800094e:	f001 f90c 	bl	8001b6a <HAL_GPIO_WritePin>
  		  break;
 8000952:	bf00      	nop
  	  }
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40010c00 	.word	0x40010c00

08000960 <fsm_for_button0>:
#include "global.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;

enum ButtonState button0State = BUTTON_RELEASED;
void fsm_for_button0( void ){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	switch(button0State){
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <fsm_for_button0+0x8c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <fsm_for_button0+0x12>
 800096c:	2b01      	cmp	r3, #1
 800096e:	d02d      	beq.n	80009cc <fsm_for_button0+0x6c>
			if(!is_button_pressed(0)){
				button0State = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 8000970:	e039      	b.n	80009e6 <fsm_for_button0+0x86>
			if(is_button_pressed(0)){
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f9ae 	bl	8000cd4 <is_button_pressed>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d030      	beq.n	80009e0 <fsm_for_button0+0x80>
				timeDuration = 1;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <fsm_for_button0+0x90>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
				timer0_flag = 1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <fsm_for_button0+0x94>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
				timer1_flag = 1;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <fsm_for_button0+0x98>)
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
				mainState++;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <fsm_for_button0+0x9c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <fsm_for_button0+0x9c>)
 8000998:	6013      	str	r3, [r2, #0]
				if(mainState > 4) {
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <fsm_for_button0+0x9c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b04      	cmp	r3, #4
 80009a0:	dd10      	ble.n	80009c4 <fsm_for_button0+0x64>
					mainState = 1;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <fsm_for_button0+0x9c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
					trafficLightState0 = 0;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <fsm_for_button0+0xa0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
					trafficLightState1 = 2;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <fsm_for_button0+0xa4>)
 80009b0:	2202      	movs	r2, #2
 80009b2:	601a      	str	r2, [r3, #0]
					count0 = timeRed;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <fsm_for_button0+0xa8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <fsm_for_button0+0xac>)
 80009ba:	6013      	str	r3, [r2, #0]
					count1 = timeGreen;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <fsm_for_button0+0xb0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <fsm_for_button0+0xb4>)
 80009c2:	6013      	str	r3, [r2, #0]
				button0State = BUTTON_PRESSED;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <fsm_for_button0+0x8c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
			break;
 80009ca:	e009      	b.n	80009e0 <fsm_for_button0+0x80>
			if(!is_button_pressed(0)){
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f981 	bl	8000cd4 <is_button_pressed>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d105      	bne.n	80009e4 <fsm_for_button0+0x84>
				button0State = BUTTON_RELEASED;
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <fsm_for_button0+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
			break;
 80009de:	e001      	b.n	80009e4 <fsm_for_button0+0x84>
			break;
 80009e0:	bf00      	nop
 80009e2:	e000      	b.n	80009e6 <fsm_for_button0+0x86>
			break;
 80009e4:	bf00      	nop
	}
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000068 	.word	0x20000068
 80009f0:	2000005c 	.word	0x2000005c
 80009f4:	2000004c 	.word	0x2000004c
 80009f8:	20000054 	.word	0x20000054
 80009fc:	20000060 	.word	0x20000060
 8000a00:	20000064 	.word	0x20000064
 8000a04:	20000018 	.word	0x20000018
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	2000001c 	.word	0x2000001c
 8000a10:	2000000c 	.word	0x2000000c
 8000a14:	20000020 	.word	0x20000020

08000a18 <fsm_for_button1>:

enum ButtonState button1State = BUTTON_RELEASED;
void fsm_for_button1( void ) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	switch(button1State){
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <fsm_for_button1+0xc4>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d030      	beq.n	8000a86 <fsm_for_button1+0x6e>
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	dc4f      	bgt.n	8000ac8 <fsm_for_button1+0xb0>
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <fsm_for_button1+0x1a>
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d016      	beq.n	8000a5e <fsm_for_button1+0x46>
					button1State = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
		default:
			break;
 8000a30:	e04a      	b.n	8000ac8 <fsm_for_button1+0xb0>
			if(is_button_pressed(1)){
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 f94e 	bl	8000cd4 <is_button_pressed>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d046      	beq.n	8000acc <fsm_for_button1+0xb4>
				timeDuration++;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <fsm_for_button1+0xc8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <fsm_for_button1+0xc8>)
 8000a46:	6013      	str	r3, [r2, #0]
				if (timeDuration > 99) timeDuration = 1;
 8000a48:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <fsm_for_button1+0xc8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b63      	cmp	r3, #99	; 0x63
 8000a4e:	dd02      	ble.n	8000a56 <fsm_for_button1+0x3e>
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <fsm_for_button1+0xc8>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
				button1State = BUTTON_PRESSED;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <fsm_for_button1+0xc4>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
			break;
 8000a5c:	e036      	b.n	8000acc <fsm_for_button1+0xb4>
			if(!is_button_pressed(1)){
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 f938 	bl	8000cd4 <is_button_pressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <fsm_for_button1+0x5a>
				button1State = BUTTON_RELEASED;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <fsm_for_button1+0xc4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
			break;
 8000a70:	e02e      	b.n	8000ad0 <fsm_for_button1+0xb8>
				if(is_button_pressed_1s(1)){
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 f948 	bl	8000d08 <is_button_pressed_1s>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d028      	beq.n	8000ad0 <fsm_for_button1+0xb8>
					button1State = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <fsm_for_button1+0xc4>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	701a      	strb	r2, [r3, #0]
			break;
 8000a84:	e024      	b.n	8000ad0 <fsm_for_button1+0xb8>
			if(!is_button_pressed(1)){
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 f924 	bl	8000cd4 <is_button_pressed>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d103      	bne.n	8000a9a <fsm_for_button1+0x82>
				button1State = BUTTON_RELEASED;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <fsm_for_button1+0xc4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
			break;
 8000a98:	e01c      	b.n	8000ad4 <fsm_for_button1+0xbc>
				if(flagForAutoCountUp[1] == 1){
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <fsm_for_button1+0xcc>)
 8000a9c:	785b      	ldrb	r3, [r3, #1]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d118      	bne.n	8000ad4 <fsm_for_button1+0xbc>
					timeDuration++;
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <fsm_for_button1+0xc8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <fsm_for_button1+0xc8>)
 8000aaa:	6013      	str	r3, [r2, #0]
					if (timeDuration > 99) timeDuration = 1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <fsm_for_button1+0xc8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b63      	cmp	r3, #99	; 0x63
 8000ab2:	dd02      	ble.n	8000aba <fsm_for_button1+0xa2>
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <fsm_for_button1+0xc8>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
					flagForAutoCountUp[1] = 0;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <fsm_for_button1+0xcc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	705a      	strb	r2, [r3, #1]
					button1State = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <fsm_for_button1+0xc4>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	701a      	strb	r2, [r3, #0]
			break;
 8000ac6:	e005      	b.n	8000ad4 <fsm_for_button1+0xbc>
			break;
 8000ac8:	bf00      	nop
 8000aca:	e004      	b.n	8000ad6 <fsm_for_button1+0xbe>
			break;
 8000acc:	bf00      	nop
 8000ace:	e002      	b.n	8000ad6 <fsm_for_button1+0xbe>
			break;
 8000ad0:	bf00      	nop
 8000ad2:	e000      	b.n	8000ad6 <fsm_for_button1+0xbe>
			break;
 8000ad4:	bf00      	nop
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000069 	.word	0x20000069
 8000ae0:	2000005c 	.word	0x2000005c
 8000ae4:	20000090 	.word	0x20000090

08000ae8 <fsm_for_button2>:

enum ButtonState button2State = BUTTON_RELEASED;
void fsm_for_button2(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
		switch(button2State){
 8000aec:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <fsm_for_button2+0x88>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <fsm_for_button2+0x12>
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d02b      	beq.n	8000b50 <fsm_for_button2+0x68>
				if(!is_button_pressed(2)){
					button2State = BUTTON_RELEASED;
				}
				break;
			default:
				break;
 8000af8:	e037      	b.n	8000b6a <fsm_for_button2+0x82>
				if(is_button_pressed(2)){
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 f8ea 	bl	8000cd4 <is_button_pressed>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d02e      	beq.n	8000b64 <fsm_for_button2+0x7c>
					switch(mainState){
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <fsm_for_button2+0x8c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d81a      	bhi.n	8000b46 <fsm_for_button2+0x5e>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <fsm_for_button2+0x30>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b47 	.word	0x08000b47
 8000b1c:	08000b29 	.word	0x08000b29
 8000b20:	08000b33 	.word	0x08000b33
 8000b24:	08000b3d 	.word	0x08000b3d
							timeRed = timeDuration;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <fsm_for_button2+0x90>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <fsm_for_button2+0x94>)
 8000b2e:	6013      	str	r3, [r2, #0]
							break;
 8000b30:	e00a      	b.n	8000b48 <fsm_for_button2+0x60>
							timeYellow = timeDuration;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <fsm_for_button2+0x90>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <fsm_for_button2+0x98>)
 8000b38:	6013      	str	r3, [r2, #0]
							break;
 8000b3a:	e005      	b.n	8000b48 <fsm_for_button2+0x60>
							timeGreen = timeDuration;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <fsm_for_button2+0x90>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <fsm_for_button2+0x9c>)
 8000b42:	6013      	str	r3, [r2, #0]
							break;
 8000b44:	e000      	b.n	8000b48 <fsm_for_button2+0x60>
							break;
 8000b46:	bf00      	nop
					button2State = BUTTON_PRESSED;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <fsm_for_button2+0x88>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
				break;
 8000b4e:	e009      	b.n	8000b64 <fsm_for_button2+0x7c>
				if(!is_button_pressed(2)){
 8000b50:	2002      	movs	r0, #2
 8000b52:	f000 f8bf 	bl	8000cd4 <is_button_pressed>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <fsm_for_button2+0x80>
					button2State = BUTTON_RELEASED;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <fsm_for_button2+0x88>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
				break;
 8000b62:	e001      	b.n	8000b68 <fsm_for_button2+0x80>
				break;
 8000b64:	bf00      	nop
 8000b66:	e000      	b.n	8000b6a <fsm_for_button2+0x82>
				break;
 8000b68:	bf00      	nop
		}
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000006a 	.word	0x2000006a
 8000b74:	20000060 	.word	0x20000060
 8000b78:	2000005c 	.word	0x2000005c
 8000b7c:	20000004 	.word	0x20000004
 8000b80:	20000008 	.word	0x20000008
 8000b84:	2000000c 	.word	0x2000000c

08000b88 <button_reading>:
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterAutoCountUp[N0_OF_BUTTONS];
uint8_t flagForAutoCountUp[N0_OF_BUTTONS];
void button_reading(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 8000b8e:	2300      	movs	r3, #0
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	e083      	b.n	8000c9c <button_reading+0x114>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4945      	ldr	r1, [pc, #276]	; (8000cb0 <button_reading+0x128>)
 8000b9a:	5c89      	ldrb	r1, [r1, r2]
 8000b9c:	4a45      	ldr	r2, [pc, #276]	; (8000cb4 <button_reading+0x12c>)
 8000b9e:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8000ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba4:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <button_reading+0x130>)
 8000ba6:	f000 ffc9 	bl	8001b3c <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b40      	ldr	r3, [pc, #256]	; (8000cb0 <button_reading+0x128>)
 8000bb0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	4840      	ldr	r0, [pc, #256]	; (8000cb8 <button_reading+0x130>)
 8000bb8:	f000 ffc0 	bl	8001b3c <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <button_reading+0x128>)
 8000bc2:	705a      	strb	r2, [r3, #1]
		debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc8:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <button_reading+0x130>)
 8000bca:	f000 ffb7 	bl	8001b3c <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <button_reading+0x128>)
 8000bd4:	709a      	strb	r2, [r3, #2]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4a35      	ldr	r2, [pc, #212]	; (8000cb0 <button_reading+0x128>)
 8000bda:	5cd2      	ldrb	r2, [r2, r3]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4935      	ldr	r1, [pc, #212]	; (8000cb4 <button_reading+0x12c>)
 8000be0:	5ccb      	ldrb	r3, [r1, r3]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d105      	bne.n	8000bf2 <button_reading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4931      	ldr	r1, [pc, #196]	; (8000cb0 <button_reading+0x128>)
 8000bec:	5c89      	ldrb	r1, [r1, r2]
 8000bee:	4a33      	ldr	r2, [pc, #204]	; (8000cbc <button_reading+0x134>)
 8000bf0:	54d1      	strb	r1, [r2, r3]
		}
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a31      	ldr	r2, [pc, #196]	; (8000cbc <button_reading+0x134>)
 8000bf6:	5cd3      	ldrb	r3, [r2, r3]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d13a      	bne.n	8000c72 <button_reading+0xea>
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4a30      	ldr	r2, [pc, #192]	; (8000cc0 <button_reading+0x138>)
 8000c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <button_reading+0x13c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c12:	4299      	cmp	r1, r3
 8000c14:	da09      	bge.n	8000c2a <button_reading+0xa2>
					counterForButtonPress1s[i]++;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a29      	ldr	r2, [pc, #164]	; (8000cc0 <button_reading+0x138>)
 8000c1a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c1e:	3201      	adds	r2, #1
 8000c20:	b291      	uxth	r1, r2
 8000c22:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <button_reading+0x138>)
 8000c24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c28:	e035      	b.n	8000c96 <button_reading+0x10e>
				}
				else {
					flagForButtonPress1s[i] = 1;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <button_reading+0x140>)
 8000c2e:	2101      	movs	r1, #1
 8000c30:	54d1      	strb	r1, [r2, r3]
					counterAutoCountUp[i]++;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <button_reading+0x144>)
 8000c36:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c3a:	3201      	adds	r2, #1
 8000c3c:	b291      	uxth	r1, r2
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <button_reading+0x144>)
 8000c40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterAutoCountUp[i] >= DURATION_FOR_AUTO_COUNT_UP){
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <button_reading+0x144>)
 8000c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <button_reading+0x13c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	db1b      	blt.n	8000c96 <button_reading+0x10e>
						flagForAutoCountUp[i] = 1;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <button_reading+0x148>)
 8000c62:	2101      	movs	r1, #1
 8000c64:	54d1      	strb	r1, [r2, r3]
						counterAutoCountUp[i] = 0;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <button_reading+0x144>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c70:	e011      	b.n	8000c96 <button_reading+0x10e>
					}
				}
			} else {
				counterForButtonPress1s[i] = 0;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <button_reading+0x138>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterAutoCountUp[i] = 0;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <button_reading+0x144>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <button_reading+0x140>)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	54d1      	strb	r1, [r2, r3]
				flagForAutoCountUp[i] = 0;
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <button_reading+0x148>)
 8000c92:	2100      	movs	r1, #0
 8000c94:	54d1      	strb	r1, [r2, r3]
	for(char i = 0; i < N0_OF_BUTTONS; i ++){
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	f67f af78 	bls.w	8000b94 <button_reading+0xc>
			}
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000070 	.word	0x20000070
 8000cb4:	20000074 	.word	0x20000074
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	2000006c 	.word	0x2000006c
 8000cc0:	2000007c 	.word	0x2000007c
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000078 	.word	0x20000078
 8000ccc:	20000084 	.word	0x20000084
 8000cd0:	20000090 	.word	0x20000090

08000cd4 <is_button_pressed>:
unsigned char is_button_pressed(unsigned char index){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <is_button_pressed+0x14>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e007      	b.n	8000cf8 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <is_button_pressed+0x30>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf0c      	ite	eq
 8000cf2:	2301      	moveq	r3, #1
 8000cf4:	2300      	movne	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000006c 	.word	0x2000006c

08000d08 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char index){
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	//if(index >= N0_OF_BUTTONS) return 0xff;
	//return (flagForButtonPress1s[index] == 1);
	return 0;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
	...

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f000 fc20 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f832 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2c:	f000 f8b8 	bl	8000ea0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d30:	f000 f86a 	bl	8000e08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <main+0x64>)
 8000d36:	f001 fb81 	bl	800243c <HAL_TIM_Base_Start_IT>
  setTimer0(10);
 8000d3a:	200a      	movs	r0, #10
 8000d3c:	f7ff fa06 	bl	800014c <setTimer0>
  setTimer1(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f7ff fa1d 	bl	8000180 <setTimer1>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  fsm_for_button0();
 8000d46:	f7ff fe0b 	bl	8000960 <fsm_for_button0>
	  	  fsm_for_button1();
 8000d4a:	f7ff fe65 	bl	8000a18 <fsm_for_button1>
	  	  fsm_for_button2();
 8000d4e:	f7ff fecb 	bl	8000ae8 <fsm_for_button2>
	  	  fsm_modify_mode();
 8000d52:	f000 fa01 	bl	8001158 <fsm_modify_mode>
	  	  if(timer0_flag == 1){
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <main+0x68>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d105      	bne.n	8000d6a <main+0x4a>
	  		  fsm_traffic_light();
 8000d5e:	f000 fa15 	bl	800118c <fsm_traffic_light>
	  		  setTimer0(1000);
 8000d62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d66:	f7ff f9f1 	bl	800014c <setTimer0>
	  	  }
	  	  if(timer1_flag == 1){
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <main+0x6c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d1e9      	bne.n	8000d46 <main+0x26>
	  		  fsm_blinking_led();
 8000d72:	f000 f8ff 	bl	8000f74 <fsm_blinking_led>
	  		  fsm_display_7SEG();
 8000d76:	f000 f96d 	bl	8001054 <fsm_display_7SEG>
	  		  setTimer1(250);
 8000d7a:	20fa      	movs	r0, #250	; 0xfa
 8000d7c:	f7ff fa00 	bl	8000180 <setTimer1>
	  	  fsm_for_button0();
 8000d80:	e7e1      	b.n	8000d46 <main+0x26>
 8000d82:	bf00      	nop
 8000d84:	20000094 	.word	0x20000094
 8000d88:	2000004c 	.word	0x2000004c
 8000d8c:	20000054 	.word	0x20000054

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b090      	sub	sp, #64	; 0x40
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0318 	add.w	r3, r7, #24
 8000d9a:	2228      	movs	r2, #40	; 0x28
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 ff04 	bl	8002bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db6:	2301      	movs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 ff00 	bl	8001bcc <HAL_RCC_OscConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dd2:	f000 f8c9 	bl	8000f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 f96c 	bl	80020cc <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dfa:	f000 f8b5 	bl	8000f68 <Error_Handler>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3740      	adds	r7, #64	; 0x40
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e2e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e3c:	2209      	movs	r2, #9
 8000e3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e4c:	4813      	ldr	r0, [pc, #76]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e4e:	f001 faa5 	bl	800239c <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e58:	f000 f886 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e6a:	f001 fc3b 	bl	80026e4 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e74:	f000 f878 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM2_Init+0x94>)
 8000e86:	f001 fe03 	bl	8002a90 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e90:	f000 f86a 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000094 	.word	0x20000094

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <MX_GPIO_Init+0xbc>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <MX_GPIO_Init+0xbc>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_GPIO_Init+0xbc>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_GPIO_Init+0xbc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <MX_GPIO_Init+0xbc>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_GPIO_Init+0xbc>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDR0_Pin|LEDY0_Pin|LEDG0_Pin|LEDR1_Pin
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000eea:	481d      	ldr	r0, [pc, #116]	; (8000f60 <MX_GPIO_Init+0xc0>)
 8000eec:	f000 fe3d 	bl	8001b6a <HAL_GPIO_WritePin>
                          |LEDY1_Pin|LEDG1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_0_Pin|SEG0_1_Pin|SEG0_2_Pin|SEG1_3_Pin
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000ef6:	481b      	ldr	r0, [pc, #108]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000ef8:	f000 fe37 	bl	8001b6a <HAL_GPIO_WritePin>
                          |SEG1_1_Pin|SEG1_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LEDR0_Pin LEDY0_Pin LEDG0_Pin LEDR1_Pin
                           LEDY1_Pin LEDG1_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LEDR0_Pin|LEDY0_Pin|LEDG0_Pin|LEDR1_Pin
 8000efc:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000f00:	60bb      	str	r3, [r7, #8]
                          |LEDY1_Pin|LEDG1_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	4619      	mov	r1, r3
 8000f14:	4812      	ldr	r0, [pc, #72]	; (8000f60 <MX_GPIO_Init+0xc0>)
 8000f16:	f000 fc97 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_0_Pin SEG0_1_Pin SEG0_2_Pin SEG1_3_Pin
                           SEG1_4_Pin SEG1_5_Pin SEG1_6_Pin SEG0_3_Pin
                           SEG0_4_Pin SEG0_5_Pin SEG0_6_Pin SEG1_0_Pin
                           SEG1_1_Pin SEG1_2_Pin */
  GPIO_InitStruct.Pin = SEG0_0_Pin|SEG0_1_Pin|SEG0_2_Pin|SEG1_3_Pin
 8000f1a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000f1e:	60bb      	str	r3, [r7, #8]
                          |SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin|SEG0_3_Pin
                          |SEG0_4_Pin|SEG0_5_Pin|SEG0_6_Pin|SEG1_0_Pin
                          |SEG1_1_Pin|SEG1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	4619      	mov	r1, r3
 8000f32:	480c      	ldr	r0, [pc, #48]	; (8000f64 <MX_GPIO_Init+0xc4>)
 8000f34:	f000 fc88 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000f38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000f3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <MX_GPIO_Init+0xc0>)
 8000f4e:	f000 fc7b 	bl	8001848 <HAL_GPIO_Init>

}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	40010c00 	.word	0x40010c00

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <Error_Handler+0x8>
	...

08000f74 <fsm_blinking_led>:

#include "input_processing.h"
#include "global.h"
#include "main.h"

void fsm_blinking_led (void){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	switch(mainState){
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <fsm_blinking_led+0xd8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d861      	bhi.n	8001046 <fsm_blinking_led+0xd2>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <fsm_blinking_led+0x14>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08001047 	.word	0x08001047
 8000f8c:	08000f99 	.word	0x08000f99
 8000f90:	08000fd3 	.word	0x08000fd3
 8000f94:	0800100d 	.word	0x0800100d
		case 1:
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOA, LEDY0_Pin,GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	482c      	ldr	r0, [pc, #176]	; (8001050 <fsm_blinking_led+0xdc>)
 8000f9e:	f000 fde4 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDG0_Pin,GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	482a      	ldr	r0, [pc, #168]	; (8001050 <fsm_blinking_led+0xdc>)
 8000fa8:	f000 fddf 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDY1_Pin,GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2120      	movs	r1, #32
 8000fb0:	4827      	ldr	r0, [pc, #156]	; (8001050 <fsm_blinking_led+0xdc>)
 8000fb2:	f000 fdda 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDG1_Pin,GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	4825      	ldr	r0, [pc, #148]	; (8001050 <fsm_blinking_led+0xdc>)
 8000fbc:	f000 fdd5 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LEDR0_Pin);
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4823      	ldr	r0, [pc, #140]	; (8001050 <fsm_blinking_led+0xdc>)
 8000fc4:	f000 fde9 	bl	8001b9a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LEDR1_Pin);
 8000fc8:	2110      	movs	r1, #16
 8000fca:	4821      	ldr	r0, [pc, #132]	; (8001050 <fsm_blinking_led+0xdc>)
 8000fcc:	f000 fde5 	bl	8001b9a <HAL_GPIO_TogglePin>
			break;
 8000fd0:	e03a      	b.n	8001048 <fsm_blinking_led+0xd4>
		case 3:
			HAL_GPIO_WritePin(GPIOA, LEDR0_Pin,GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	481e      	ldr	r0, [pc, #120]	; (8001050 <fsm_blinking_led+0xdc>)
 8000fd8:	f000 fdc7 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDG0_Pin,GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2108      	movs	r1, #8
 8000fe0:	481b      	ldr	r0, [pc, #108]	; (8001050 <fsm_blinking_led+0xdc>)
 8000fe2:	f000 fdc2 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDR1_Pin,GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2110      	movs	r1, #16
 8000fea:	4819      	ldr	r0, [pc, #100]	; (8001050 <fsm_blinking_led+0xdc>)
 8000fec:	f000 fdbd 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDG1_Pin,GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2140      	movs	r1, #64	; 0x40
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <fsm_blinking_led+0xdc>)
 8000ff6:	f000 fdb8 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LEDY0_Pin);
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <fsm_blinking_led+0xdc>)
 8000ffe:	f000 fdcc 	bl	8001b9a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LEDY1_Pin);
 8001002:	2120      	movs	r1, #32
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <fsm_blinking_led+0xdc>)
 8001006:	f000 fdc8 	bl	8001b9a <HAL_GPIO_TogglePin>
			break;
 800100a:	e01d      	b.n	8001048 <fsm_blinking_led+0xd4>
		case 4:
			HAL_GPIO_WritePin(GPIOA, LEDY0_Pin,GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2104      	movs	r1, #4
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <fsm_blinking_led+0xdc>)
 8001012:	f000 fdaa 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDR0_Pin,GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2102      	movs	r1, #2
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <fsm_blinking_led+0xdc>)
 800101c:	f000 fda5 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDY1_Pin,GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2120      	movs	r1, #32
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <fsm_blinking_led+0xdc>)
 8001026:	f000 fda0 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LEDR1_Pin,GPIO_PIN_SET);
 800102a:	2201      	movs	r2, #1
 800102c:	2110      	movs	r1, #16
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <fsm_blinking_led+0xdc>)
 8001030:	f000 fd9b 	bl	8001b6a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LEDG0_Pin);
 8001034:	2108      	movs	r1, #8
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <fsm_blinking_led+0xdc>)
 8001038:	f000 fdaf 	bl	8001b9a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, LEDG1_Pin);
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <fsm_blinking_led+0xdc>)
 8001040:	f000 fdab 	bl	8001b9a <HAL_GPIO_TogglePin>
			break;
 8001044:	e000      	b.n	8001048 <fsm_blinking_led+0xd4>
		default:
			break;
 8001046:	bf00      	nop
	}
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000060 	.word	0x20000060
 8001050:	40010800 	.word	0x40010800

08001054 <fsm_display_7SEG>:

int SEGState = 0;
void fsm_display_7SEG(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

		switch (SEGState){
 8001058:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <fsm_display_7SEG+0xf0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <fsm_display_7SEG+0x12>
 8001060:	2b01      	cmp	r3, #1
 8001062:	d031      	beq.n	80010c8 <fsm_display_7SEG+0x74>
				display7SEG0(timeDisplay0 % 10);
				display7SEG1(timeDisplay1 % 10);
				SEGState = 0;
				break;
			default:
				break;
 8001064:	e06b      	b.n	800113e <fsm_display_7SEG+0xea>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	4837      	ldr	r0, [pc, #220]	; (8001148 <fsm_display_7SEG+0xf4>)
 800106c:	f000 fd7d 	bl	8001b6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4834      	ldr	r0, [pc, #208]	; (8001148 <fsm_display_7SEG+0xf4>)
 8001078:	f000 fd77 	bl	8001b6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001082:	4831      	ldr	r0, [pc, #196]	; (8001148 <fsm_display_7SEG+0xf4>)
 8001084:	f000 fd71 	bl	8001b6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108e:	482e      	ldr	r0, [pc, #184]	; (8001148 <fsm_display_7SEG+0xf4>)
 8001090:	f000 fd6b 	bl	8001b6a <HAL_GPIO_WritePin>
				display7SEG0(timeDisplay0 / 10);
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <fsm_display_7SEG+0xf8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <fsm_display_7SEG+0xfc>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	1092      	asrs	r2, r2, #2
 80010a0:	17db      	asrs	r3, r3, #31
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f8b3 	bl	8000210 <display7SEG0>
				display7SEG1(timeDisplay1 / 10);
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <fsm_display_7SEG+0x100>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a28      	ldr	r2, [pc, #160]	; (8001150 <fsm_display_7SEG+0xfc>)
 80010b0:	fb82 1203 	smull	r1, r2, r2, r3
 80010b4:	1092      	asrs	r2, r2, #2
 80010b6:	17db      	asrs	r3, r3, #31
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa5a 	bl	8000574 <display7SEG1>
				SEGState = 1;
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <fsm_display_7SEG+0xf0>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
				break;
 80010c6:	e03a      	b.n	800113e <fsm_display_7SEG+0xea>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	481e      	ldr	r0, [pc, #120]	; (8001148 <fsm_display_7SEG+0xf4>)
 80010ce:	f000 fd4c 	bl	8001b6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d8:	481b      	ldr	r0, [pc, #108]	; (8001148 <fsm_display_7SEG+0xf4>)
 80010da:	f000 fd46 	bl	8001b6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN2_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e4:	4818      	ldr	r0, [pc, #96]	; (8001148 <fsm_display_7SEG+0xf4>)
 80010e6:	f000 fd40 	bl	8001b6a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, EN3_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f0:	4815      	ldr	r0, [pc, #84]	; (8001148 <fsm_display_7SEG+0xf4>)
 80010f2:	f000 fd3a 	bl	8001b6a <HAL_GPIO_WritePin>
				display7SEG0(timeDisplay0 % 10);
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <fsm_display_7SEG+0xf8>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <fsm_display_7SEG+0xfc>)
 80010fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001100:	1099      	asrs	r1, r3, #2
 8001102:	17d3      	asrs	r3, r2, #31
 8001104:	1ac9      	subs	r1, r1, r3
 8001106:	460b      	mov	r3, r1
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	1ad1      	subs	r1, r2, r3
 8001110:	4608      	mov	r0, r1
 8001112:	f7ff f87d 	bl	8000210 <display7SEG0>
				display7SEG1(timeDisplay1 % 10);
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <fsm_display_7SEG+0x100>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <fsm_display_7SEG+0xfc>)
 800111c:	fb83 1302 	smull	r1, r3, r3, r2
 8001120:	1099      	asrs	r1, r3, #2
 8001122:	17d3      	asrs	r3, r2, #31
 8001124:	1ac9      	subs	r1, r1, r3
 8001126:	460b      	mov	r3, r1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	1ad1      	subs	r1, r2, r3
 8001130:	4608      	mov	r0, r1
 8001132:	f7ff fa1f 	bl	8000574 <display7SEG1>
				SEGState = 0;
 8001136:	4b03      	ldr	r3, [pc, #12]	; (8001144 <fsm_display_7SEG+0xf0>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
				break;
 800113c:	bf00      	nop
		}
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000008c 	.word	0x2000008c
 8001148:	40010800 	.word	0x40010800
 800114c:	20000010 	.word	0x20000010
 8001150:	66666667 	.word	0x66666667
 8001154:	20000014 	.word	0x20000014

08001158 <fsm_modify_mode>:


void fsm_modify_mode(void){
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	if(mainState > 1){
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <fsm_modify_mode+0x24>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	dd07      	ble.n	8001174 <fsm_modify_mode+0x1c>
		timeDisplay0 = mainState;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <fsm_modify_mode+0x24>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <fsm_modify_mode+0x28>)
 800116a:	6013      	str	r3, [r2, #0]
		timeDisplay1 = timeDuration;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <fsm_modify_mode+0x2c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <fsm_modify_mode+0x30>)
 8001172:	6013      	str	r3, [r2, #0]
	}
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20000060 	.word	0x20000060
 8001180:	20000010 	.word	0x20000010
 8001184:	2000005c 	.word	0x2000005c
 8001188:	20000014 	.word	0x20000014

0800118c <fsm_traffic_light>:

void fsm_traffic_light ( void ){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	if (mainState == 1){
 8001190:	4b87      	ldr	r3, [pc, #540]	; (80013b0 <fsm_traffic_light+0x224>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 8100 	bne.w	800139a <fsm_traffic_light+0x20e>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4885      	ldr	r0, [pc, #532]	; (80013b4 <fsm_traffic_light+0x228>)
 80011a0:	f000 fce3 	bl	8001b6a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	4882      	ldr	r0, [pc, #520]	; (80013b4 <fsm_traffic_light+0x228>)
 80011ac:	f000 fcdd 	bl	8001b6a <HAL_GPIO_WritePin>
		switch(trafficLightState0){
 80011b0:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <fsm_traffic_light+0x22c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d04e      	beq.n	8001256 <fsm_traffic_light+0xca>
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	dc70      	bgt.n	800129e <fsm_traffic_light+0x112>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <fsm_traffic_light+0x3a>
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d024      	beq.n	800120e <fsm_traffic_light+0x82>
					  trafficLightState0 = 1;
					  count0 = timeYellow;
				  }
				  break;
			default:
				break;
 80011c4:	e06b      	b.n	800129e <fsm_traffic_light+0x112>
				  HAL_GPIO_WritePin(GPIOA, LEDR0_Pin,GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2102      	movs	r1, #2
 80011ca:	487a      	ldr	r0, [pc, #488]	; (80013b4 <fsm_traffic_light+0x228>)
 80011cc:	f000 fccd 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDY0_Pin,GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2104      	movs	r1, #4
 80011d4:	4877      	ldr	r0, [pc, #476]	; (80013b4 <fsm_traffic_light+0x228>)
 80011d6:	f000 fcc8 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDG0_Pin,GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	2108      	movs	r1, #8
 80011de:	4875      	ldr	r0, [pc, #468]	; (80013b4 <fsm_traffic_light+0x228>)
 80011e0:	f000 fcc3 	bl	8001b6a <HAL_GPIO_WritePin>
				  timeDisplay0 = count0;
 80011e4:	4b75      	ldr	r3, [pc, #468]	; (80013bc <fsm_traffic_light+0x230>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a75      	ldr	r2, [pc, #468]	; (80013c0 <fsm_traffic_light+0x234>)
 80011ea:	6013      	str	r3, [r2, #0]
				  count0--;
 80011ec:	4b73      	ldr	r3, [pc, #460]	; (80013bc <fsm_traffic_light+0x230>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a72      	ldr	r2, [pc, #456]	; (80013bc <fsm_traffic_light+0x230>)
 80011f4:	6013      	str	r3, [r2, #0]
				  if(count0 <= 0) {
 80011f6:	4b71      	ldr	r3, [pc, #452]	; (80013bc <fsm_traffic_light+0x230>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dc51      	bgt.n	80012a2 <fsm_traffic_light+0x116>
					  trafficLightState0 = 2;
 80011fe:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <fsm_traffic_light+0x22c>)
 8001200:	2202      	movs	r2, #2
 8001202:	601a      	str	r2, [r3, #0]
					  count0 = timeGreen;
 8001204:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <fsm_traffic_light+0x238>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a6c      	ldr	r2, [pc, #432]	; (80013bc <fsm_traffic_light+0x230>)
 800120a:	6013      	str	r3, [r2, #0]
				  break;
 800120c:	e049      	b.n	80012a2 <fsm_traffic_light+0x116>
				  HAL_GPIO_WritePin(GPIOA, LEDR0_Pin,GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2102      	movs	r1, #2
 8001212:	4868      	ldr	r0, [pc, #416]	; (80013b4 <fsm_traffic_light+0x228>)
 8001214:	f000 fca9 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDY0_Pin,GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2104      	movs	r1, #4
 800121c:	4865      	ldr	r0, [pc, #404]	; (80013b4 <fsm_traffic_light+0x228>)
 800121e:	f000 fca4 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDG0_Pin,GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2108      	movs	r1, #8
 8001226:	4863      	ldr	r0, [pc, #396]	; (80013b4 <fsm_traffic_light+0x228>)
 8001228:	f000 fc9f 	bl	8001b6a <HAL_GPIO_WritePin>
				  timeDisplay0 = count0;
 800122c:	4b63      	ldr	r3, [pc, #396]	; (80013bc <fsm_traffic_light+0x230>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <fsm_traffic_light+0x234>)
 8001232:	6013      	str	r3, [r2, #0]
				  count0--;
 8001234:	4b61      	ldr	r3, [pc, #388]	; (80013bc <fsm_traffic_light+0x230>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	4a60      	ldr	r2, [pc, #384]	; (80013bc <fsm_traffic_light+0x230>)
 800123c:	6013      	str	r3, [r2, #0]
				  if(count0 <= 0) {
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <fsm_traffic_light+0x230>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	dc2f      	bgt.n	80012a6 <fsm_traffic_light+0x11a>
					  trafficLightState0 = 0;
 8001246:	4b5c      	ldr	r3, [pc, #368]	; (80013b8 <fsm_traffic_light+0x22c>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
					  count0 = timeRed;
 800124c:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <fsm_traffic_light+0x23c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a5a      	ldr	r2, [pc, #360]	; (80013bc <fsm_traffic_light+0x230>)
 8001252:	6013      	str	r3, [r2, #0]
				  break;
 8001254:	e027      	b.n	80012a6 <fsm_traffic_light+0x11a>
				  HAL_GPIO_WritePin(GPIOA, LEDR0_Pin,GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	4856      	ldr	r0, [pc, #344]	; (80013b4 <fsm_traffic_light+0x228>)
 800125c:	f000 fc85 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDY0_Pin,GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	2104      	movs	r1, #4
 8001264:	4853      	ldr	r0, [pc, #332]	; (80013b4 <fsm_traffic_light+0x228>)
 8001266:	f000 fc80 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDG0_Pin,GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2108      	movs	r1, #8
 800126e:	4851      	ldr	r0, [pc, #324]	; (80013b4 <fsm_traffic_light+0x228>)
 8001270:	f000 fc7b 	bl	8001b6a <HAL_GPIO_WritePin>
				  timeDisplay0 = count0;
 8001274:	4b51      	ldr	r3, [pc, #324]	; (80013bc <fsm_traffic_light+0x230>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <fsm_traffic_light+0x234>)
 800127a:	6013      	str	r3, [r2, #0]
				  count0--;
 800127c:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <fsm_traffic_light+0x230>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3b01      	subs	r3, #1
 8001282:	4a4e      	ldr	r2, [pc, #312]	; (80013bc <fsm_traffic_light+0x230>)
 8001284:	6013      	str	r3, [r2, #0]
				  if(count0 <= 0 ) {
 8001286:	4b4d      	ldr	r3, [pc, #308]	; (80013bc <fsm_traffic_light+0x230>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	dc0d      	bgt.n	80012aa <fsm_traffic_light+0x11e>
					  trafficLightState0 = 1;
 800128e:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <fsm_traffic_light+0x22c>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
					  count0 = timeYellow;
 8001294:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <fsm_traffic_light+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a48      	ldr	r2, [pc, #288]	; (80013bc <fsm_traffic_light+0x230>)
 800129a:	6013      	str	r3, [r2, #0]
				  break;
 800129c:	e005      	b.n	80012aa <fsm_traffic_light+0x11e>
				break;
 800129e:	bf00      	nop
 80012a0:	e004      	b.n	80012ac <fsm_traffic_light+0x120>
				  break;
 80012a2:	bf00      	nop
 80012a4:	e002      	b.n	80012ac <fsm_traffic_light+0x120>
				  break;
 80012a6:	bf00      	nop
 80012a8:	e000      	b.n	80012ac <fsm_traffic_light+0x120>
				  break;
 80012aa:	bf00      	nop
		}

		switch(trafficLightState1){
 80012ac:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <fsm_traffic_light+0x244>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d006      	beq.n	80012c2 <fsm_traffic_light+0x136>
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	dc72      	bgt.n	800139e <fsm_traffic_light+0x212>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d04a      	beq.n	8001352 <fsm_traffic_light+0x1c6>
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d024      	beq.n	800130a <fsm_traffic_light+0x17e>
					  trafficLightState1 = 2;
					  count1 = timeGreen;
				  }
				  break;
			default:
				break;
 80012c0:	e06d      	b.n	800139e <fsm_traffic_light+0x212>
				  HAL_GPIO_WritePin(GPIOA, LEDR1_Pin,GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	2110      	movs	r1, #16
 80012c6:	483b      	ldr	r0, [pc, #236]	; (80013b4 <fsm_traffic_light+0x228>)
 80012c8:	f000 fc4f 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDY1_Pin,GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2120      	movs	r1, #32
 80012d0:	4838      	ldr	r0, [pc, #224]	; (80013b4 <fsm_traffic_light+0x228>)
 80012d2:	f000 fc4a 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDG1_Pin,GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4836      	ldr	r0, [pc, #216]	; (80013b4 <fsm_traffic_light+0x228>)
 80012dc:	f000 fc45 	bl	8001b6a <HAL_GPIO_WritePin>
				  timeDisplay1 = count1;
 80012e0:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <fsm_traffic_light+0x248>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a3c      	ldr	r2, [pc, #240]	; (80013d8 <fsm_traffic_light+0x24c>)
 80012e6:	6013      	str	r3, [r2, #0]
				  count1--;
 80012e8:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <fsm_traffic_light+0x248>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a39      	ldr	r2, [pc, #228]	; (80013d4 <fsm_traffic_light+0x248>)
 80012f0:	6013      	str	r3, [r2, #0]
				  if(count1 <= 0) {
 80012f2:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <fsm_traffic_light+0x248>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dc53      	bgt.n	80013a2 <fsm_traffic_light+0x216>
					  trafficLightState1 = 1;
 80012fa:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <fsm_traffic_light+0x244>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
					  count1 = timeYellow;
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <fsm_traffic_light+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <fsm_traffic_light+0x248>)
 8001306:	6013      	str	r3, [r2, #0]
				  break;
 8001308:	e04b      	b.n	80013a2 <fsm_traffic_light+0x216>
				  HAL_GPIO_WritePin(GPIOA, LEDR1_Pin,GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2110      	movs	r1, #16
 800130e:	4829      	ldr	r0, [pc, #164]	; (80013b4 <fsm_traffic_light+0x228>)
 8001310:	f000 fc2b 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDY1_Pin,GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2120      	movs	r1, #32
 8001318:	4826      	ldr	r0, [pc, #152]	; (80013b4 <fsm_traffic_light+0x228>)
 800131a:	f000 fc26 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDG1_Pin,GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	4824      	ldr	r0, [pc, #144]	; (80013b4 <fsm_traffic_light+0x228>)
 8001324:	f000 fc21 	bl	8001b6a <HAL_GPIO_WritePin>
				  timeDisplay1 = count1;
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <fsm_traffic_light+0x248>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <fsm_traffic_light+0x24c>)
 800132e:	6013      	str	r3, [r2, #0]
				  count1--;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <fsm_traffic_light+0x248>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <fsm_traffic_light+0x248>)
 8001338:	6013      	str	r3, [r2, #0]
				  if(count1 <= 0) {
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <fsm_traffic_light+0x248>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	dc31      	bgt.n	80013a6 <fsm_traffic_light+0x21a>
					  trafficLightState1 = 0;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <fsm_traffic_light+0x244>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
					  count1 = timeRed;
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <fsm_traffic_light+0x23c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <fsm_traffic_light+0x248>)
 800134e:	6013      	str	r3, [r2, #0]
				  break;
 8001350:	e029      	b.n	80013a6 <fsm_traffic_light+0x21a>
				  HAL_GPIO_WritePin(GPIOA, LEDR1_Pin,GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2110      	movs	r1, #16
 8001356:	4817      	ldr	r0, [pc, #92]	; (80013b4 <fsm_traffic_light+0x228>)
 8001358:	f000 fc07 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDY1_Pin,GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	2120      	movs	r1, #32
 8001360:	4814      	ldr	r0, [pc, #80]	; (80013b4 <fsm_traffic_light+0x228>)
 8001362:	f000 fc02 	bl	8001b6a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, LEDG1_Pin,GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	4812      	ldr	r0, [pc, #72]	; (80013b4 <fsm_traffic_light+0x228>)
 800136c:	f000 fbfd 	bl	8001b6a <HAL_GPIO_WritePin>
				  timeDisplay1 = count1;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <fsm_traffic_light+0x248>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <fsm_traffic_light+0x24c>)
 8001376:	6013      	str	r3, [r2, #0]
				  count1--;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <fsm_traffic_light+0x248>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <fsm_traffic_light+0x248>)
 8001380:	6013      	str	r3, [r2, #0]
				  if(count1  <= 0) {
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <fsm_traffic_light+0x248>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	dc0f      	bgt.n	80013aa <fsm_traffic_light+0x21e>
					  trafficLightState1 = 2;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <fsm_traffic_light+0x244>)
 800138c:	2202      	movs	r2, #2
 800138e:	601a      	str	r2, [r3, #0]
					  count1 = timeGreen;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <fsm_traffic_light+0x238>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <fsm_traffic_light+0x248>)
 8001396:	6013      	str	r3, [r2, #0]
				  break;
 8001398:	e007      	b.n	80013aa <fsm_traffic_light+0x21e>
		}

	}
 800139a:	bf00      	nop
 800139c:	e006      	b.n	80013ac <fsm_traffic_light+0x220>
				break;
 800139e:	bf00      	nop
 80013a0:	e004      	b.n	80013ac <fsm_traffic_light+0x220>
				  break;
 80013a2:	bf00      	nop
 80013a4:	e002      	b.n	80013ac <fsm_traffic_light+0x220>
				  break;
 80013a6:	bf00      	nop
 80013a8:	e000      	b.n	80013ac <fsm_traffic_light+0x220>
				  break;
 80013aa:	bf00      	nop

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000060 	.word	0x20000060
 80013b4:	40010800 	.word	0x40010800
 80013b8:	20000064 	.word	0x20000064
 80013bc:	2000001c 	.word	0x2000001c
 80013c0:	20000010 	.word	0x20000010
 80013c4:	2000000c 	.word	0x2000000c
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000018 	.word	0x20000018
 80013d4:	20000020 	.word	0x20000020
 80013d8:	20000014 	.word	0x20000014

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_MspInit+0x5c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_MspInit+0x5c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_MspInit+0x60>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_MspInit+0x60>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001450:	d113      	bne.n	800147a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	201c      	movs	r0, #28
 8001470:	f000 f9b3 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001474:	201c      	movs	r0, #28
 8001476:	f000 f9cc 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler+0x4>

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ce:	f000 f891 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM2_IRQHandler+0x10>)
 80014de:	f000 fff9 	bl	80024d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000094 	.word	0x20000094

080014ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_TIM_PeriodElapsedCallback>:

#include "main.h"
#include "input_reading.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001508:	d103      	bne.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800150a:	f7ff fb3d 	bl	8000b88 <button_reading>
		timer_run();
 800150e:	f7fe fe51 	bl	80001b4 <timer_run>
	}
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	; (8001560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001542:	f7ff ffd3 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f001 fb0d 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800154a:	f7ff fbe9 	bl	8000d20 <main>
  bx lr
 800154e:	4770      	bx	lr
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001558:	08002bfc 	.word	0x08002bfc
  ldr r2, =_sbss
 800155c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001560:	200000e0 	.word	0x200000e0

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_Init+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_Init+0x28>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f923 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff ff2a 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f93b 	bl	800182e <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f903 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000024 	.word	0x20000024
 80015ec:	2000002c 	.word	0x2000002c
 80015f0:	20000028 	.word	0x20000028

080015f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_IncTick+0x1c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_IncTick+0x20>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_IncTick+0x20>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	2000002c 	.word	0x2000002c
 8001614:	200000dc 	.word	0x200000dc

08001618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <HAL_GetTick+0x10>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	200000dc 	.word	0x200000dc

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4906      	ldr	r1, [pc, #24]	; (80016c4 <__NVIC_EnableIRQ+0x34>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100

080016c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	6039      	str	r1, [r7, #0]
 80016d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db0a      	blt.n	80016f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <__NVIC_SetPriority+0x4c>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	0112      	lsls	r2, r2, #4
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	440b      	add	r3, r1
 80016ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f0:	e00a      	b.n	8001708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <__NVIC_SetPriority+0x50>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	3b04      	subs	r3, #4
 8001700:	0112      	lsls	r2, r2, #4
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	440b      	add	r3, r1
 8001706:	761a      	strb	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f1c3 0307 	rsb	r3, r3, #7
 8001736:	2b04      	cmp	r3, #4
 8001738:	bf28      	it	cs
 800173a:	2304      	movcs	r3, #4
 800173c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3304      	adds	r3, #4
 8001742:	2b06      	cmp	r3, #6
 8001744:	d902      	bls.n	800174c <NVIC_EncodePriority+0x30>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3b03      	subs	r3, #3
 800174a:	e000      	b.n	800174e <NVIC_EncodePriority+0x32>
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	401a      	ands	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43d9      	mvns	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	4313      	orrs	r3, r2
         );
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff90 	bl	80016c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff2d 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff42 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff90 	bl	800171c <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5f 	bl	80016c8 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff35 	bl	8001690 <__NVIC_EnableIRQ>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ffa2 	bl	8001780 <SysTick_Config>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b08b      	sub	sp, #44	; 0x2c
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185a:	e148      	b.n	8001aee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800185c:	2201      	movs	r2, #1
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	429a      	cmp	r2, r3
 8001876:	f040 8137 	bne.w	8001ae8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4aa3      	ldr	r2, [pc, #652]	; (8001b0c <HAL_GPIO_Init+0x2c4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d05e      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 8001884:	4aa1      	ldr	r2, [pc, #644]	; (8001b0c <HAL_GPIO_Init+0x2c4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d875      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 800188a:	4aa1      	ldr	r2, [pc, #644]	; (8001b10 <HAL_GPIO_Init+0x2c8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d058      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 8001890:	4a9f      	ldr	r2, [pc, #636]	; (8001b10 <HAL_GPIO_Init+0x2c8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d86f      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 8001896:	4a9f      	ldr	r2, [pc, #636]	; (8001b14 <HAL_GPIO_Init+0x2cc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d052      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 800189c:	4a9d      	ldr	r2, [pc, #628]	; (8001b14 <HAL_GPIO_Init+0x2cc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d869      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 80018a2:	4a9d      	ldr	r2, [pc, #628]	; (8001b18 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d04c      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 80018a8:	4a9b      	ldr	r2, [pc, #620]	; (8001b18 <HAL_GPIO_Init+0x2d0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d863      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 80018ae:	4a9b      	ldr	r2, [pc, #620]	; (8001b1c <HAL_GPIO_Init+0x2d4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d046      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
 80018b4:	4a99      	ldr	r2, [pc, #612]	; (8001b1c <HAL_GPIO_Init+0x2d4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d85d      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d82a      	bhi.n	8001914 <HAL_GPIO_Init+0xcc>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d859      	bhi.n	8001976 <HAL_GPIO_Init+0x12e>
 80018c2:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <HAL_GPIO_Init+0x80>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	08001943 	.word	0x08001943
 80018cc:	0800191d 	.word	0x0800191d
 80018d0:	0800192f 	.word	0x0800192f
 80018d4:	08001971 	.word	0x08001971
 80018d8:	08001977 	.word	0x08001977
 80018dc:	08001977 	.word	0x08001977
 80018e0:	08001977 	.word	0x08001977
 80018e4:	08001977 	.word	0x08001977
 80018e8:	08001977 	.word	0x08001977
 80018ec:	08001977 	.word	0x08001977
 80018f0:	08001977 	.word	0x08001977
 80018f4:	08001977 	.word	0x08001977
 80018f8:	08001977 	.word	0x08001977
 80018fc:	08001977 	.word	0x08001977
 8001900:	08001977 	.word	0x08001977
 8001904:	08001977 	.word	0x08001977
 8001908:	08001977 	.word	0x08001977
 800190c:	08001925 	.word	0x08001925
 8001910:	08001939 	.word	0x08001939
 8001914:	4a82      	ldr	r2, [pc, #520]	; (8001b20 <HAL_GPIO_Init+0x2d8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191a:	e02c      	b.n	8001976 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	623b      	str	r3, [r7, #32]
          break;
 8001922:	e029      	b.n	8001978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	3304      	adds	r3, #4
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e024      	b.n	8001978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	3308      	adds	r3, #8
 8001934:	623b      	str	r3, [r7, #32]
          break;
 8001936:	e01f      	b.n	8001978 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	330c      	adds	r3, #12
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e01a      	b.n	8001978 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194a:	2304      	movs	r3, #4
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e013      	b.n	8001978 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001958:	2308      	movs	r3, #8
 800195a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	611a      	str	r2, [r3, #16]
          break;
 8001962:	e009      	b.n	8001978 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	615a      	str	r2, [r3, #20]
          break;
 800196e:	e003      	b.n	8001978 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
          break;
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x130>
          break;
 8001976:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	d801      	bhi.n	8001982 <HAL_GPIO_Init+0x13a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	e001      	b.n	8001986 <HAL_GPIO_Init+0x13e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3304      	adds	r3, #4
 8001986:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2bff      	cmp	r3, #255	; 0xff
 800198c:	d802      	bhi.n	8001994 <HAL_GPIO_Init+0x14c>
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x152>
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	3b08      	subs	r3, #8
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	210f      	movs	r1, #15
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	6a39      	ldr	r1, [r7, #32]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8090 	beq.w	8001ae8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_GPIO_Init+0x2dc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <HAL_GPIO_Init+0x2dc>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_GPIO_Init+0x2dc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e0:	4a51      	ldr	r2, [pc, #324]	; (8001b28 <HAL_GPIO_Init+0x2e0>)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_GPIO_Init+0x2e4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1e0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x2e8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1dc>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a47      	ldr	r2, [pc, #284]	; (8001b34 <HAL_GPIO_Init+0x2ec>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1d8>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e004      	b.n	8001a2a <HAL_GPIO_Init+0x1e2>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x1e2>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <HAL_GPIO_Init+0x1e2>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2c:	f002 0203 	and.w	r2, r2, #3
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	4093      	lsls	r3, r2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3a:	493b      	ldr	r1, [pc, #236]	; (8001b28 <HAL_GPIO_Init+0x2e0>)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4937      	ldr	r1, [pc, #220]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4933      	ldr	r1, [pc, #204]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	492d      	ldr	r1, [pc, #180]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4929      	ldr	r1, [pc, #164]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	4923      	ldr	r1, [pc, #140]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	491f      	ldr	r1, [pc, #124]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4919      	ldr	r1, [pc, #100]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4915      	ldr	r1, [pc, #84]	; (8001b38 <HAL_GPIO_Init+0x2f0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	3301      	adds	r3, #1
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f47f aeaf 	bne.w	800185c <HAL_GPIO_Init+0x14>
  }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	372c      	adds	r7, #44	; 0x2c
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	10320000 	.word	0x10320000
 8001b10:	10310000 	.word	0x10310000
 8001b14:	10220000 	.word	0x10220000
 8001b18:	10210000 	.word	0x10210000
 8001b1c:	10120000 	.word	0x10120000
 8001b20:	10110000 	.word	0x10110000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	40010800 	.word	0x40010800
 8001b30:	40010c00 	.word	0x40010c00
 8001b34:	40011000 	.word	0x40011000
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	807b      	strh	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7a:	787b      	ldrb	r3, [r7, #1]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b86:	e003      	b.n	8001b90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	041a      	lsls	r2, r3, #16
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	611a      	str	r2, [r3, #16]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bac:	887a      	ldrh	r2, [r7, #2]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	041a      	lsls	r2, r3, #16
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	400b      	ands	r3, r1
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e26c      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d00c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	4b8f      	ldr	r3, [pc, #572]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d112      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
 8001c04:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c10:	d10b      	bne.n	8001c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d06c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d168      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e246      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x76>
 8001c34:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a7f      	ldr	r2, [pc, #508]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e02e      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a77      	ldr	r2, [pc, #476]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0xbc>
 8001c6e:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xd4>
 8001c88:	4b6b      	ldr	r3, [pc, #428]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6a      	ldr	r2, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fcb6 	bl	8001618 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fcb2 	bl	8001618 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1fa      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xe4>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fca2 	bl	8001618 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fc9e 	bl	8001618 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1e6      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x10c>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
 8001d1e:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1ba      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4939      	ldr	r1, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fc57 	bl	8001618 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fc53 	bl	8001618 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e19b      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc36 	bl	8001618 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fc32 	bl	8001618 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e17a      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03a      	beq.n	8001e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff fc16 	bl	8001618 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fc12 	bl	8001618 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e15a      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f000 faa6 	bl	8002360 <RCC_Delay>
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fbfc 	bl	8001618 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e22:	e00f      	b.n	8001e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fbf8 	bl	8001618 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d908      	bls.n	8001e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e140      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	42420000 	.word	0x42420000
 8001e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b9e      	ldr	r3, [pc, #632]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e9      	bne.n	8001e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a6 	beq.w	8001faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b97      	ldr	r3, [pc, #604]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4b94      	ldr	r3, [pc, #592]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a93      	ldr	r2, [pc, #588]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b91      	ldr	r3, [pc, #580]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b8e      	ldr	r3, [pc, #568]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b8b      	ldr	r3, [pc, #556]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a8a      	ldr	r2, [pc, #552]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fbb9 	bl	8001618 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff fbb5 	bl	8001618 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b64      	cmp	r3, #100	; 0x64
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0fd      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x312>
 8001ed0:	4b7b      	ldr	r3, [pc, #492]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a7a      	ldr	r2, [pc, #488]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	e02d      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a75      	ldr	r2, [pc, #468]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b73      	ldr	r3, [pc, #460]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a72      	ldr	r2, [pc, #456]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	e01c      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x356>
 8001f08:	4b6d      	ldr	r3, [pc, #436]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a6c      	ldr	r2, [pc, #432]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a69      	ldr	r2, [pc, #420]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x36e>
 8001f22:	4b67      	ldr	r3, [pc, #412]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a66      	ldr	r2, [pc, #408]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b64      	ldr	r3, [pc, #400]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a63      	ldr	r2, [pc, #396]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fb69 	bl	8001618 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff fb65 	bl	8001618 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0ab      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCC_OscConfig+0x37e>
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fb53 	bl	8001618 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff fb4f 	bl	8001618 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e095      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a47      	ldr	r2, [pc, #284]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8081 	beq.w	80020b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d061      	beq.n	8002084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d146      	bne.n	8002056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <HAL_RCC_OscConfig+0x4fc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7ff fb23 	bl	8001618 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7ff fb1f 	bl	8001618 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e067      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	492d      	ldr	r1, [pc, #180]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a19      	ldr	r1, [r3, #32]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	430b      	orrs	r3, r1
 8002022:	4927      	ldr	r1, [pc, #156]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x4fc>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff faf3 	bl	8001618 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff faef 	bl	8001618 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e037      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x46a>
 8002054:	e02f      	b.n	80020b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_RCC_OscConfig+0x4fc>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fadc 	bl	8001618 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff fad8 	bl	8001618 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e020      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x498>
 8002082:	e018      	b.n	80020b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e013      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
 80020c8:	42420060 	.word	0x42420060

080020cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0d0      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b6a      	ldr	r3, [pc, #424]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b67      	ldr	r3, [pc, #412]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	4965      	ldr	r1, [pc, #404]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b8      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002128:	4b59      	ldr	r3, [pc, #356]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a58      	ldr	r2, [pc, #352]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002132:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800214a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	494d      	ldr	r1, [pc, #308]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d040      	beq.n	80021ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e07f      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d107      	bne.n	800219a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e073      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e06b      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4936      	ldr	r1, [pc, #216]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7ff fa2c 	bl	8001618 <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7ff fa28 	bl	8001618 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e053      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d210      	bcs.n	800221c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	4922      	ldr	r1, [pc, #136]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e032      	b.n	8002282 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4916      	ldr	r1, [pc, #88]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	490e      	ldr	r1, [pc, #56]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800225a:	f000 f821 	bl	80022a0 <HAL_RCC_GetSysClockFreq>
 800225e:	4602      	mov	r2, r0
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	490a      	ldr	r1, [pc, #40]	; (8002294 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	5ccb      	ldrb	r3, [r1, r3]
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1cc>)
 8002274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RCC_ClockConfig+0x1d0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f98a 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40022000 	.word	0x40022000
 8002290:	40021000 	.word	0x40021000
 8002294:	08002be4 	.word	0x08002be4
 8002298:	20000024 	.word	0x20000024
 800229c:	20000028 	.word	0x20000028

080022a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a0:	b490      	push	{r4, r7}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a8:	1d3c      	adds	r4, r7, #4
 80022aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022b0:	f240 2301 	movw	r3, #513	; 0x201
 80022b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x40>
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x46>
 80022de:	e02d      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e2:	623b      	str	r3, [r7, #32]
      break;
 80022e4:	e02d      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022f2:	4413      	add	r3, r2
 80022f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	0c5b      	lsrs	r3, r3, #17
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002312:	4413      	add	r3, r2
 8002314:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002318:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231e:	fb02 f203 	mul.w	r2, r2, r3
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e004      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	623b      	str	r3, [r7, #32]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233e:	623b      	str	r3, [r7, #32]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	6a3b      	ldr	r3, [r7, #32]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc90      	pop	{r4, r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	08002bd4 	.word	0x08002bd4
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	003d0900 	.word	0x003d0900

08002360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <RCC_Delay+0x34>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <RCC_Delay+0x38>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0a5b      	lsrs	r3, r3, #9
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800237c:	bf00      	nop
  }
  while (Delay --);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	60fa      	str	r2, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <RCC_Delay+0x1c>
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000024 	.word	0x20000024
 8002398:	10624dd3 	.word	0x10624dd3

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e041      	b.n	8002432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff f83c 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 fa6a 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d001      	beq.n	8002454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e035      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a16      	ldr	r2, [pc, #88]	; (80024cc <HAL_TIM_Base_Start_IT+0x90>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_TIM_Base_Start_IT+0x4e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d004      	beq.n	800248a <HAL_TIM_Base_Start_IT+0x4e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d111      	bne.n	80024ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b06      	cmp	r3, #6
 800249a:	d010      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	e007      	b.n	80024be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400

080024d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d122      	bne.n	8002530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d11b      	bne.n	8002530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0202 	mvn.w	r2, #2
 8002500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f9b1 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f9a4 	bl	800286c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f9b3 	bl	8002890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d122      	bne.n	8002584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b04      	cmp	r3, #4
 800254a:	d11b      	bne.n	8002584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0204 	mvn.w	r2, #4
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f987 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f97a 	bl	800286c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f989 	bl	8002890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d122      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b08      	cmp	r3, #8
 800259e:	d11b      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0208 	mvn.w	r2, #8
 80025a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2204      	movs	r2, #4
 80025ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f95d 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 80025c4:	e005      	b.n	80025d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f950 	bl	800286c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f95f 	bl	8002890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d122      	bne.n	800262c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d11b      	bne.n	800262c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0210 	mvn.w	r2, #16
 80025fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2208      	movs	r2, #8
 8002602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f933 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f926 	bl	800286c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f935 	bl	8002890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0201 	mvn.w	r2, #1
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe ff50 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa67 	bl	8002b52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d107      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f8f9 	bl	80028a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d107      	bne.n	80026dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0220 	mvn.w	r2, #32
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fa32 	bl	8002b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_TIM_ConfigClockSource+0x18>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e0b3      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x180>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800271a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002722:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002734:	d03e      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0xd0>
 8002736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273a:	f200 8087 	bhi.w	800284c <HAL_TIM_ConfigClockSource+0x168>
 800273e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002742:	f000 8085 	beq.w	8002850 <HAL_TIM_ConfigClockSource+0x16c>
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	d87f      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x168>
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d01a      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0xa2>
 8002750:	2b70      	cmp	r3, #112	; 0x70
 8002752:	d87b      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x168>
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d050      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x116>
 8002758:	2b60      	cmp	r3, #96	; 0x60
 800275a:	d877      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x168>
 800275c:	2b50      	cmp	r3, #80	; 0x50
 800275e:	d03c      	beq.n	80027da <HAL_TIM_ConfigClockSource+0xf6>
 8002760:	2b50      	cmp	r3, #80	; 0x50
 8002762:	d873      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x168>
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d058      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x136>
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d86f      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x168>
 800276c:	2b30      	cmp	r3, #48	; 0x30
 800276e:	d064      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x156>
 8002770:	2b30      	cmp	r3, #48	; 0x30
 8002772:	d86b      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x168>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d060      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x156>
 8002778:	2b20      	cmp	r3, #32
 800277a:	d867      	bhi.n	800284c <HAL_TIM_ConfigClockSource+0x168>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d05c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x156>
 8002780:	2b10      	cmp	r3, #16
 8002782:	d05a      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002784:	e062      	b.n	800284c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f000 f95c 	bl	8002a52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	609a      	str	r2, [r3, #8]
      break;
 80027b2:	e04e      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6899      	ldr	r1, [r3, #8]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f000 f945 	bl	8002a52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d6:	609a      	str	r2, [r3, #8]
      break;
 80027d8:	e03b      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f000 f8bc 	bl	8002964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2150      	movs	r1, #80	; 0x50
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f913 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 80027f8:	e02b      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	461a      	mov	r2, r3
 8002808:	f000 f8da 	bl	80029c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2160      	movs	r1, #96	; 0x60
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f903 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 8002818:	e01b      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	f000 f89c 	bl	8002964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2140      	movs	r1, #64	; 0x40
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f8f3 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 8002838:	e00b      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f000 f8ea 	bl	8002a1e <TIM_ITRx_SetConfig>
        break;
 800284a:	e002      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002850:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a25      	ldr	r2, [pc, #148]	; (800295c <TIM_Base_SetConfig+0xa8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_Base_SetConfig+0x28>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0x28>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a22      	ldr	r2, [pc, #136]	; (8002960 <TIM_Base_SetConfig+0xac>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d108      	bne.n	80028ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <TIM_Base_SetConfig+0xa8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <TIM_Base_SetConfig+0x52>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d003      	beq.n	8002906 <TIM_Base_SetConfig+0x52>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <TIM_Base_SetConfig+0xac>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d108      	bne.n	8002918 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a07      	ldr	r2, [pc, #28]	; (800295c <TIM_Base_SetConfig+0xa8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d103      	bne.n	800294c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400

08002964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f023 0201 	bic.w	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800298e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f023 030a 	bic.w	r3, r3, #10
 80029a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f023 0210 	bic.w	r2, r3, #16
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	031b      	lsls	r3, r3, #12
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	621a      	str	r2, [r3, #32]
}
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f043 0307 	orr.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e041      	b.n	8002b2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af4:	d004      	beq.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10c      	bne.n	8002b1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40000400 	.word	0x40000400

08002b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	2600      	movs	r6, #0
 8002b68:	4d0c      	ldr	r5, [pc, #48]	; (8002b9c <__libc_init_array+0x38>)
 8002b6a:	4c0d      	ldr	r4, [pc, #52]	; (8002ba0 <__libc_init_array+0x3c>)
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	f000 f822 	bl	8002bbc <_init>
 8002b78:	2600      	movs	r6, #0
 8002b7a:	4d0a      	ldr	r5, [pc, #40]	; (8002ba4 <__libc_init_array+0x40>)
 8002b7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <__libc_init_array+0x44>)
 8002b7e:	1b64      	subs	r4, r4, r5
 8002b80:	10a4      	asrs	r4, r4, #2
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08002bf4 	.word	0x08002bf4
 8002ba0:	08002bf4 	.word	0x08002bf4
 8002ba4:	08002bf4 	.word	0x08002bf4
 8002ba8:	08002bf8 	.word	0x08002bf8

08002bac <memset>:
 8002bac:	4603      	mov	r3, r0
 8002bae:	4402      	add	r2, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <_init>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	bf00      	nop
 8002bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc2:	bc08      	pop	{r3}
 8002bc4:	469e      	mov	lr, r3
 8002bc6:	4770      	bx	lr

08002bc8 <_fini>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	bf00      	nop
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr
